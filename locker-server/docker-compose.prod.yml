version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: locker-prod-pg
    environment:
      POSTGRES_DB: locker
      POSTGRES_USER: locker
      POSTGRES_PASSWORD: secure_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/db/migrate:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U locker -d locker"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: locker-prod-redis
    command: redis-server --appendonly yes --requirepass redis_password_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: locker-prod-app
    environment:
      - DB_URL=postgres://locker:secure_password_2024@postgres:5432/locker?sslmode=disable
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=redis_password_2024
      - JWT_SECRET=production_jwt_secret_key_2024_very_secure
      - GIN_MODE=release
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: locker-prod-network
